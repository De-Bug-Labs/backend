swagger: '2.0'
info: 
  version: 0.0.1
  title: GAAP API
host: 'localhost:5000'
basePath: /api
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  BasicAuth:
    type: basic
security:
  - BasicAuth: []
parameters: 
  pageParam:
    name: page
    in: query
    description: The page number
    required: false
    type: integer
  pageSizeParam:
    name: pageSize
    in: query
    description: Max numer of elements per page
    required: false
    type: integer
paths:
  /swagger:
    x-swagger-pipe: swagger_raw 
  #---------Example Endpoints-------------------
  /example:
    x-swagger-router-controller: ExampleController
    x-typeorm-repository-name: ExampleUser
    post:
      x-security-privilege: 'test:write'
      operationId: createExampleUser
      description: Create a new example user
      tags:
        - example
      parameters:
        - name: exampleUser
          description: user
          in: body
          schema:
            $ref: '#/definitions/ExampleUser'
      responses:
        '200':
          description: Test successful
          schema:
            $ref: '#/definitions/ExampleResponse'
        '400':
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
  /example/{id}:
    x-swagger-router-controller: ExampleController
    x-typeorm-repository-name: ExampleUser
    get:
      x-security-privilege: 'test:read'
      operationId: readExampleUser
      description: Find an example user by id
      tags:
        - example
      parameters:
        - name: id
          type: string
          format: uuid
          in: path
          required: true
      responses:
        '200':
          description: Test successful
          schema:
            $ref: '#/definitions/ExampleResponse'
        '404':
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      x-security-privilege: 'test:write'
      operationId: updateExampleUser
      description: Update an example user by id
      tags:
        - example
      parameters:
        - name: id
          type: string
          format: uuid
          in: path
          required: true
        - name: exampleUser
          description: user
          in: body
          schema:
            $ref: '#/definitions/ExampleUser'
      responses:
        '200':
          description: Test successful
          schema:
            $ref: '#/definitions/ExampleResponse'
        '404':
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      x-security-privilege: 'test:delete'
      operationId: deleteExampleUser
      description: Delete an example user by id
      tags:
        - example
      parameters:
        - name: id
          type: string
          format: uuid
          in: path
          required: true
      responses:
        '200':
          description: Test successful
          schema:
            $ref: '#/definitions/ExampleResponse'
        '404':
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
   #-------//end example endpoints-------------------
   #-------register email form-----------------------
  /mail:
    x-swagger-router-controller: EmailController
    x-typeorm-repository-name: Staff
    post:
      x-security-privilege: 'test:read'
      operationId: createRegisterEmail
      description: Test the example endpoint
      tags:
        - mail
      parameters:
        - name: postRegister
          in: body
          required: true
          description: The user to create.
          schema:
            type: object
            properties:
              departmentId:
                type: string
                format: uuid
                description: 'ID of the specialist that will receive the email'
              name:
                type: string
                description: 'Name of the person who is going to send the email'
              email:
                type: string 
                description: 'Email of the person who is sending the emai'
              phone:
                type: string
                description: 'Phone of the person who is sendind the emai'
              description:
                type: string  
                description: 'Description of the email'
      responses:
        '201':
          description: Test successful
          schema:
            $ref: '#/definitions/SuccessfulMail'
        '404':
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
    #----------//register email form------------
    #----------Create new staff member----------
  /staff:
    x-swagger-router-controller: StaffController
    x-typeorm-repository-name: Staff
    post:
      x-security-privilege: 'test:read'
      operationId: createStaff
      description: Test the example endpoint
      tags:
        - staff
      parameters:
        - name: staff
          in: body
          required: true
          description: The staff to create.
          schema:
            type: object
            properties:
              departmentId:
                type: array
                description: 'ID of the department of the staff'
                items:
                  type: string
                  format: uuid
              name:
                type: string
                description: 'Name of the staff'
              email:
                type: string 
                description: 'Email of the staff'
      responses:
        '201':
          description: Test successful
          schema:
            $ref: '#/definitions/SuccessfulStaff'
        '404':
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
    #-------------//create new staff member----------
    #---------------Delete staff member--------------
    delete:
      x-security-privilege: 'test:delete'
      operationId: deleteStaff
      description: Delete an staff member by id
      tags:
        - staff
      parameters:
        - name: staff
          in: body
          required: true
          description: The staff to delete.
          schema:
            type: object
            properties:
              staffId:
                type: string
                format: uuid
                description: 'id of the staff member'
      responses:
        '201':
          description: Test successful
          schema:
            $ref: '#/definitions/SuccessfulStaff'
        '404':
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Test unsuccessful
          schema:
            $ref: '#/definitions/ErrorResponse'
    #-------------//Delete staff member--------------

 
definitions:
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  ExampleUser:
    type: object
    properties:
        firstName:
          type: string
        lastName:
          type: string
        age:
          type: number
  ExampleResponse:
    allOf:
      - type: object
        properties:
          id:
            type: string
            format: uuid
      - $ref: '#/definitions/ExampleUser'
  SuccessfulMail:
    type: object
    properties:
        id_post:
          type: string
          format: uuid
        staffId:
          type: string
        name:
          type: string
        email:
          type: string  
        phone:
          type: string  
        description:
          type: string 
        date:
          type: string  
  SuccessfulStaff:
    type: object
    properties:
        StaffId:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string  